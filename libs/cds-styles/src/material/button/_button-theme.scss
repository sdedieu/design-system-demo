@use 'sass:map';
@use '@angular/material' as mat;

@mixin color($color-config) {
  .mdc-button,
  .mdc-icon-button {
    &.mat-mdc-button-base,
    &.mat-mdc-raised-button,
    &.mat-mdc-unelevated-button,
    &.mat-mdc-outlined-button {
      &.mat-primary {
        // medium (default)
        color: var(--color-text-primary-medium-default);
        background-color: var(--color-background-primary-medium-default);

        &:hover {
          color: var(--color-text-primary-medium-hover);
          background-color: var(--color-background-primary-medium-hover);
        }
        &:active {
          color: var(--color-text-primary-medium-pressed);
          background-color: var(--color-background-primary-medium-pressed);
        }
        &:focus-visible {
          color: var(--color-text-primary-medium-focus);
          background-color: var(--color-background-primary-medium-focus);
          box-shadow: var(--ring-primary);
        }
        &:disabled,
        &[disabled] {
          color: var(--color-text-disabled);
          background-color: var(--color-background-disabled);
        }

        &[cds-type='very-strong'] {
          color: var(--color-text-primary-very-strong-default);
          background-color: var(--color-background-primary-very-strong-default);

          &:hover {
            color: var(--color-text-primary-very-strong-hover);
            background-color: var(--color-background-primary-very-strong-hover);
          }
          &:active {
            color: var(--color-text-primary-very-strong-pressed);
            background-color: var(
              --color-background-primary-very-strong-pressed
            );
          }
          &:focus-visible {
            color: var(--color-text-primary-very-strong-focus);
            background-color: var(--color-background-primary-very-strong-focus);
            box-shadow: var(--ring-primary);
          }
          &:disabled,
          &[disabled] {
            color: var(--color-text-disabled);
            background-color: var(--color-background-disabled);
          }
        }
      }

      &.mat-secondary {
        // weak (default)
        color: var(--color-text-secondary-weak-default);
        background-color: var(--color-background-secondary-weak-default);
        border-color: var(--color-border-secondary-weak-default);

        &:hover {
          color: var(--color-text-secondary-weak-hover);
          background-color: var(--color-background-secondary-weak-hover);
          border-color: var(--color-border-secondary-weak-hover);
        }
        &:active {
          color: var(--color-text-secondary-weak-pressed);
          background-color: var(--color-background-secondary-weak-pressed);
          border-color: var(--color-border-secondary-weak-pressed);
        }
        &:focus-visible {
          color: var(--color-text-secondary-weak-focus);
          background-color: var(--color-background-secondary-weak-focus);
          box-shadow: var(--ring-primary);
        }
        &:disabled,
        &[disabled] {
          color: var(--color-text-disabled);
          background-color: var(--color-background-disabled);
        }

        &[cds-type='very-weak'] {
          color: var(--color-text-secondary-weak-default);
          background-color: var(--color-background-secondary-very-weak-default);
          border: var(--button-border-none);

          &:hover {
            color: var(--color-text-secondary-weak-hover);
            background-color: var(--color-background-secondary-very-weak-hover);
          }
          &:active {
            color: var(--color-text-secondary-weak-pressed);
            background-color: var(
              --color-background-secondary-very-weak-pressed
            );
          }
          &:focus-visible {
            color: var(--color-text-secondary-weak-focus);
            background-color: var(--color-background-secondary-very-weak-focus);
            box-shadow: var(--ring-primary);
          }
          &:disabled,
          &[disabled] {
            color: var(--color-text-disabled);
            background-color: var(--color-background-disabled);
            border-color: transparent;
          }
          // the activated state only exists on the secondary very-weak variant
          &[activated='true'] {
            background-color: var(
              --color-background-secondary-very-weak-activated
            );
            color: var(--color-icon-secondary-very-weak-activated);
          }
        }
      }

      &.mat-accent {
        color: var(--color-text-accent-default);

        // very-strong (default)
        background-color: var(--color-background-accent-very-strong-default);

        &:hover {
          background-color: var(--color-background-accent-very-strong-hover);
        }
        &:active {
          background-color: var(--color-background-accent-very-strong-pressed);
        }
        &:focus-visible {
          background-color: var(--color-background-accent-very-strong-focus);
          box-shadow: var(--ring-accent);
        }
        &:disabled,
        &[disabled] {
          color: var(--color-text-disabled);
          background-color: var(--color-background-disabled);
        }
      }

      &.mat-destructive {
        // medium (default)
        color: var(--color-text-destructive-medium-default);
        background-color: var(--color-background-destructive-medium-default);

        &:hover {
          color: var(--color-text-destructive-medium-hover);
          background-color: var(--color-background-destructive-medium-hover);
        }
        &:active {
          color: var(--color-text-destructive-medium-pressed);
          background-color: var(--color-background-destructive-medium-pressed);
        }
        &:focus-visible {
          color: var(--color-text-destructive-medium-focus);
          background-color: var(--color-background-destructive-medium-focus);
          box-shadow: var(--ring-destructive);
        }
        &:disabled,
        &[disabled] {
          color: var(--color-text-disabled);
          background-color: var(--color-background-disabled);
        }

        &[cds-type='very-strong'] {
          color: var(--color-text-destructive-very-strong-default);
          background-color: var(
            --color-background-destructive-very-strong-default
          );

          &:hover {
            color: var(--color-text-destructive-very-strong-hover);
            background-color: var(
              --color-background-destructive-very-strong-hover
            );
          }
          &:active {
            color: var(--color-text-destructive-very-strong-pressed);
            background-color: var(
              --color-background-destructive-very-strong-pressed
            );
          }
          &:focus-visible {
            color: var(--color-text-destructive-very-strong-focus);
            background-color: var(
              --color-background-destructive-very-strong-focus
            );
            box-shadow: var(--ring-destructive);
          }
          &:disabled,
          &[disabled] {
            color: var(--color-text-disabled);
            background-color: var(--color-background-disabled);
          }
        }
      }
    }
  }
  // if the icon button has no icon, make it transparent
  // this is a workaround for cases like the buttons in the mat-tree leafs
  .mdc-icon-button:not(:has(.mat-icon)):not(:has(::before)):not(:has(::after)) {
    color: transparent !important;
    background-color: transparent !important;
  }
}

@mixin typography($typography-config) {
  .mdc-button,
  .mdc-icon-button {
    &.mat-mdc-button-base,
    &.mat-mdc-icon-button {
      @include mat.typography-level($typography-config, 'button');

      &[cds-size='large'] {
        @include mat.typography-level($typography-config, 'button-large');
      }
    }
  }
}

@mixin theme($theme) {
  $color-config: mat.get-color-config($theme);
  @if $color-config != null {
    @include color($color-config);
  }

  $typography-config: mat.get-typography-config($theme);
  @if $typography-config != null {
    @include typography($typography-config);
  }
}
